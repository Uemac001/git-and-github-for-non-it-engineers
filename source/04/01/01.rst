#####################################################################
ローカルリポジトリのみを用いたファイル管理
#####################################################################

ローカルリポジトリを新規に作成してファイルの管理を行う方法です。

| 個人で、しかもローカル環境だけでのバージョン管理として使用したいのであれば難しいことはありません。
| 個人的なプログラムの開発だけならこれでも充分です。リモートとローカル両方で管理したくなった場合あとからリモートの環境を追加することも可能です。

| 管理を始めるには
| :menuselection:`リポジトリを作成 --> 管理したいファイルを追加 --> コミット` 

| 普段の作業は以下の作業の繰り返しです。
| :menuselection:`ファイルを編集 --> 区切りのいいところでコミット` 



*********************************************************************
管理を始める
*********************************************************************

リポジトリを作成
=====================================================================

| まずはじめにGitで管理したい作業ディレクトリを作成しましょう。
| 任意の場所にフォルダを作成してエクスプローラーで開きます。

.. figure:: ../02/image/01/010.png



---------------------------------------------------------------------

フォルダを開いたら、フォルダの余白部分を右クックして、右クリックメニューの :menuselection:`Git ここにリポジトリを作成` を選択します。

.. figure:: ../02/image/01/140.png



---------------------------------------------------------------------

TortoiseGitのダイアログがるので「Bareを生成(作業ディレクトリをつくりません)」のチェックを外して :menuselection:`OK` を選択します。

.. figure:: ../02/image/01/150.png



---------------------------------------------------------------------

メッセージが表示されるので :menuselection:`OK` を選択します。

.. figure:: ../02/image/01/160.png



---------------------------------------------------------------------

| フォルダに :file:`.git` が作成されました。
| これでこのフォルダ( :file:`practice_rep` )はローカルリポジトリとしてGitで管理できるようになりました。

.. figure:: ../02/image/01/050.png



管理したいファイルを追加
=====================================================================

| リポジトリを作成できたので、さっそく管理対象のファイルを追加していきましょう。
| 追加したいファイルを先ほどのフォルダ( :file:`practice_rep` )に追加します。

.. figure:: ../02/image/01/010.png



コミット（ファイルを追跡できるようにする）
=====================================================================

| 作業ディレクトリにファイルを追加しましたが、この段階では追加したファイルはまだGitで追跡されていません。
| ファイルを追加したことをコミットしてリポジトリに登録します。

今回の操作はVSCodeを用いて行います。

まず、エクスプローラーで開いている :file:`practice_rep` で、右クリックメニューの :menuselection:`Code で開く` を選択します。

.. figure:: image/01/020.png



---------------------------------------------------------------------

| VSCodeが起動します。
| このようにVSCodeで作業したいフォルダで右クリックメニューからVSCodeを起動すると、簡単に作業を進められます。

.. figure:: image/01/030.png



---------------------------------------------------------------------

| VSCodeが起動したらアクティビティバーからソース管理タブを開きます。
| このソース管理タブからコミットなどの操作を行えます。

| ソース管理タブを開くと「変更」ビュー内に先ほど追加したファイル名があります。ここには直近のコミットの状況から変更（追加、削除、移動も含む）があったファイルが表示される場所です。

.. figure:: image/01/040.png




---------------------------------------------------------------------

コミットを行うにはまず、コミットする対象をステージング(add)する必要があります。

変更ビューに表示されているファイル名にカーソルを重ねると、右側にいくつかアイコンが表示され、 :menuselection:`+` アイコンをクリックすることでそのファイルをステージングすることができます。

コミットしたいファイルをステージングしましょう。

:menuselection:`+` アイコンをクリックすると、ファイルは :file:`ステージされている変更` に移動します。

.. figure:: image/01/050.gif




---------------------------------------------------------------------

コミットしたいファイルをステージングしたら、ソース管理タブの上部にあるテキストボックスにコミットする際のメッセージを記入します。

この時のメッセージは自分が見ても他人が見ても、何をしたのかわかるようなメッセージにすることを心がけましょう。

.. figure:: image/01/060.png

| メッセージを入力してテキストボックスの下の :menuselection:`コミット` をクリックすればコミット完了です。
| これで追加したファイルがGitで変更を追跡出来るようになりました。




*********************************************************************
普段の作業
*********************************************************************

リポジトリの用意さえできてしまえば、あとはファイルを更新してコミットの繰り返しです。

ファイルの更新（追加、変更、削除）
=====================================================================

リポジトリを作成し、管理したいファイルを追加してコミットしたら、作業ディレクトリでファイルの更新を行っていきます。
VSCodeを使用してファイルを編集してみましょう。

| まずは作業ディレクトリをVSCodeで開きます。
| アクティビティバーのエクスプローラータブでファイルを選択するとエディターにファイルの内容が表示されます。

.. figure:: image/01/070.png

そのままエディターでファイルを編集して保存( :kbd:`Ctrl` + :kbd:`s` )します。

.. figure:: image/01/080.png

コミット
=====================================================================

| ファイルを更新したら更新の内容をコミットしてリポジトリに記録しましょう。
| 前項でもやりましたが、コミットするにはステージングが必要です。
| :menuselection:`ファイルの更新 --> ステージング --> コミット` これが基本です。

.. figure:: image/01/090.gif