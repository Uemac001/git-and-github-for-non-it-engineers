#####################################################################
Gitを使ったファイル管理の概要
#####################################################################

Gitの利用方法の大きな流れは以下のようになる。

0. **リポジトリ**  の作成と管理対象のファイルの追加 **（初回のみ）**
1. 編集したいバージョンのファイルの取得（ **チェックアウト** ）
2. ファイルの編集
3. 編集内容をリポジトリに保存（ **コミット** ）

上記の流れを繰り返すことにより、リポジトリに編集履歴を蓄積していくことが基本であり、蓄積した編集履歴を利用して差分を確認することができる。
また、変更履歴の流れを分岐させることにより文枝（ブランチ）を作成し、複数のバージョンを同時に開発することも可能です。


*********************************************************************
ファイルの管理方式
*********************************************************************

| リポジトリには各ファイルの各バージョンが保存されています。
| 例えば以下のようにファイルの変更があったとします。

.. figure:: image/02/010.png
    :width: 100%

|
|
| このとき、リポジトリには各ファイルの各バージョンの内容をそれぞれ圧縮した **ブロブ** というオブジェクトが作成されています。
| また、コミット時には「コミットしたユーザーの名前とメールアドレス」、「どのコミットからの変更か」、「コミット日時」などが記録された **コミットオブジェクト** が生成され、詳しい仕様は割愛しますがコミット時のファイルの状況に対応したブロブが紐づいています。

.. figure:: image/02/020.png

.. note:: 
    ここではわかりやすさを優先して割愛していますが、実際はコミットオブジェクトが直接ブロブを参照しているのではなく、コミットオブジェクトはツリーオブジェクトという管理ファイルのディレクトリの構造の情報を持つオブジェクトを参照し、ツリーオブジェクトがブロブを参照しています。

|
| つまりGitではコミットした時点の「管理対象の各ファイルの中身」、「ディレクトリの構造」を丸ごと記録しています。
| このコミット時の管理対象ファイルの状況を **スナップショット** と呼び、Gitのファイル管理方法をまとめると「連続したスナップショットの蓄積」と言えます。

このような管理方法をとっているため、過去のバージョン（スナップショット）の復元、変更差分の表示を簡単に行えます。


*********************************************************************
ローカルだけで個人で管理する場合
*********************************************************************

| 個人で、しかもローカル環境だけでのバージョン管理として使用したいのであれば難しいことはありません。
| 個人的なプログラムの開発だけならこれでも充分です。リモートとローカル両方で管理したくなった場合あとからリモートの環境を追加することも可能です。

| 管理を始めるには
| :menuselection:`リポジトリを作成 --> 管理したいファイルを追加 --> コミット` 

| 普段の作業は
| :menuselection:`ファイルを編集 --> 区切りのいいところでコミット` 

これだけでも以下のようなことはできます。

- コメント付きで、時系列も明確でキレイなファイルのバージョン管理
- 任意の時点に戻る
- 過去の特定の変更を打ち消す
- 変更履歴を分岐させて複数のバージョンの管理
- 他の分岐での変更を他の分岐に統合

*********************************************************************
ローカルとサーバー（リモート）で管理する場合
*********************************************************************

以下のような場合はリモートにもリポジトリを作成することをおすすめします。

- 自分のPCだけではなくサーバーにもバックアップを残しておきたい場合。
- 他の人と更新履歴を共有したい場合。
- 他の人と共同で開発したい場合。
- 開発したプログラムを公開したい場合。


| リモートとローカルでのやり取りがあるので作業の流れに少し作業が増えます。
| GitHubを使用する想定です。

| 一例として管理開始の流れは
| :menuselection:`GitHubでリモートリポジトリを作成 --> ローカルに複製(clone) --> 管理したいファイルを追加 --> コミット --> リモートに変更履歴を統合(push)` 

| 普段の作業は 
| :menuselection:`ローカルでファイルを編集 --> 区切りのいいところでコミット` の繰り返し

| プログラムをリリースするタイミングや、他人に共有するタイミングで
| :menuselection:`リモートに変更履歴を統合(push)` 

他の人は同じリモートリポジトリから自分のPCに :menuselection:`ローカルに複製(clone)` をして作業を始めてください。

自分以外の人がリモートリポジトリに追加した変更を自分のPCのリポジトリに持ってくるときは :menuselection:`pull` か :menuselection:`fetch --> merge` をつかいます。
